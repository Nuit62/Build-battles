var Room = require('pixel_combats/room');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
var votes = {};
var votedPlayers = [];
var isVotingActive = false;

// –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function startVoting(duration) {
    votes = {};
    votedPlayers = [];
    isVotingActive = true;
    
    Room.Ui.GetContext().Hint.Value = "–ì–æ–ª–æ—Å—É–π—Ç–µ: /Vote [RoomId] (–û—Å—Ç–∞–ª–æ—Å—å " + duration + " —Å–µ–∫)";
    Room.Chat.OnMessage.Add(onVoteCommand);
    
    new Room.Timer(duration, endVoting).Start();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /Vote
function onVoteCommand(e) {
    if (!isVotingActive) return;
    
    var voter = Room.Players.GetByRoomId(e.Sender);
    var args = e.Text.trim().split(' ');
    
    if (args[0] !== "/Vote" || args.length < 2) return;
    
    var targetRoomId = parseInt(args[1]);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (votedPlayers.indexOf(voter.IdInRoom) !== -1) {
        voter.Message("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!");
        return;
    }
    
    if (!Room.Players.GetByRoomId(targetRoomId)) {
        voter.Message("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }
    
    // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
    votes[targetRoomId] = (votes[targetRoomId] || 0) + 1;
    votedPlayers.push(voter.IdInRoom);
    voter.Message("–ì–æ–ª–æ—Å –∑–∞ –∏–≥—Ä–æ–∫–∞ " + targetRoomId + " —É—á—Ç—ë–Ω!");
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function endVoting() {
    isVotingActive = false;
    Room.Chat.OnMessage.Remove(onVoteCommand);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    var winnerRoomId = null;
    var maxVotes = 0;
    
    for (var roomId in votes) {
        if (votes.hasOwnProperty(roomId) && votes[roomId] > maxVotes) {
            maxVotes = votes[roomId];
            winnerRoomId = roomId;
        }
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (winnerRoomId) {
        var winner = Room.Players.GetByRoomId(parseInt(winnerRoomId));
        var winnerMsg = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ò–≥—Ä–æ–∫ " + winnerRoomId + " (" + maxVotes + " –≥–æ–ª–æ—Å–æ–≤)";
        Room.Players.All.forEach(function(p) {
            p.Message(winnerMsg);
        });
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–∞
function getPlayerScore(roomId) {
    return votes[roomId] || 0;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
    startVoting: startVoting,
    getPlayerScore: getPlayerScore
};