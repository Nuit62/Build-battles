// –ò–º–∏—Ç–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
var Basic = require('pixel_combats/basic');
var Room = require('pixel_combats/room');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
var BUILD_TIME = 60;
var VOTE_TIME = 30;
var VOTE_REWARD = 1;
var KIK_THRESHOLD = 3;

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
var STATE_BUILD = "–°–±–æ—Ä–∫–∞";
var STATE_VOTE = "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ";
var STATE_END = "–ö–æ–Ω–µ—Ü";

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var currentState = STATE_BUILD;
var votes = {};
var kikVotes = {};
var votedPlayers = [];
var scores = {};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function init() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    Room.Properties.GetContext().GameModeName.Value = "–ë–∏—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π";
    Room.Damage.GetContext().DamageOut.Value = false;
    Room.Spawns.GetContext().RespawnTime.Value = 0;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    var team = Room.Teams.Add("Builders", "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏", new Basic.Color(0.5, 0.5, 0.5, 0));
    team.Spawns.SpawnPointsGroups.Add(1);

    // –õ–∏–¥–µ—Ä–±–æ—Ä–¥
    Room.LeaderBoard.PlayerLeaderBoardValues = [
        { Value: "Scores", DisplayName: "–û—á–∫–∏", ShortDisplayName: "üèÜ" },
        { Value: "Votes", DisplayName: "–ì–æ–ª–æ—Å–∞", ShortDisplayName: "üëç" }
    ];

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞
    Room.Chat.OnMessage.Add(onChatMessage);

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    new Room.Timer(BUILD_TIME, startVoting).Start();
    updateGameState(STATE_BUILD);
}

function updateGameState(state) {
    currentState = state;
    Room.Ui.GetContext().Hint.Value = getStateHint(state);
    
    if (state === STATE_BUILD) {
        Room.Build.GetContext().BlocksSet.Value = Room.BuildBlocksSet.AllClear;
    } else if (state === STATE_VOTE) {
        Room.Build.GetContext().BlocksSet.Value = Room.BuildBlocksSet.None;
    }
}

function getStateHint(state) {
    if (state === STATE_BUILD) {
        return "–°—Ç—Ä–æ–π—Ç–µ! –û—Å—Ç–∞–ª–æ—Å—å " + BUILD_TIME + " —Å–µ–∫.\n–ö–∏–∫: /Kik [RoomId] (–Ω—É–∂–Ω–æ " + KIK_THRESHOLD + " –≥–æ–ª–æ—Å–∞)";
    } else if (state === STATE_VOTE) {
        return "–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É: /Vote [RoomId]\n–û—Å—Ç–∞–ª–æ—Å—å " + VOTE_TIME + " —Å–µ–∫.";
    }
    return "";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞
function onChatMessage(e) {
    if (currentState !== STATE_VOTE) return;
    
    var player = Room.Players.GetByRoomId(e.Sender);
    var text = e.Text.trim();
    
    if (text.indexOf("/Vote ") === 0) {
        handleBuildVote(player, text);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É
function handleBuildVote(voter, command) {
    if (votedPlayers.indexOf(voter.IdInRoom) !== -1) {
        voter.Message("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!");
        return;
    }
    
    var targetRoomId = parseInt(command.split(" ")[1]);
    if (!Room.Players.GetByRoomId(targetRoomId)) {
        voter.Message("–ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º RoomId –Ω–µ—Ç!");
        return;
    }
    
    votes[targetRoomId] = (votes[targetRoomId] || 0) + 1;
    votedPlayers.push(voter.IdInRoom);
    voter.Message("–í–∞—à –≥–æ–ª–æ—Å –∑–∞ –∏–≥—Ä–æ–∫–∞ " + targetRoomId + " —É—á—Ç–µ–Ω!");
}

// –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function startVoting() {
    updateGameState(STATE_VOTE);
    votes = {};
    votedPlayers = [];
    new Room.Timer(VOTE_TIME, endVoting).Start();
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function endVoting() {
    updateGameState(STATE_END);
    
    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    for (var roomId in votes) {
        if (votes.hasOwnProperty(roomId)) {
            var player = Room.Players.GetByRoomId(parseInt(roomId));
            if (player) {
                player.Properties.Scores.Value += votes[roomId] * VOTE_REWARD;
            }
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    var winnerRoomId = null;
    var maxVotes = 0;
    
    for (var id in votes) {
        if (votes[id] > maxVotes) {
            maxVotes = votes[id];
            winnerRoomId = id;
        }
    }
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
    if (winnerRoomId) {
        var winner = Room.Players.GetByRoomId(parseInt(winnerRoomId));
        var winnerMessage = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ò–≥—Ä–æ–∫ " + winnerRoomId + " (" + maxVotes + " –≥–æ–ª–æ—Å–æ–≤)!";
        Room.Players.All.forEach(function(p) {
            p.Message(winnerMessage);
        });
    }
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    new Room.Timer(10, resetGame).Start();
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    Room.Build.GetContext().ClearAll();
    Room.Players.All.forEach(function(p) {
        p.Properties.Votes.Value = 0;
        p.Spawns.Spawn();
    });
    new Room.Timer(BUILD_TIME, startVoting).Start();
    updateGameState(STATE_BUILD);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ init
module.exports = { init: init };