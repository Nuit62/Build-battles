import { Color, Timer } from 'pixel_combats/basic';
import { Teams, GameMode, Players, Properties, LeaderBoard, Ui, Spawns, Damage, Build, Chat } from 'pixel_combats/room';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const BUILD_TIME = 60;
const VOTE_TIME = 30;
const VOTE_REWARD = 1;
const KIK_THRESHOLD = 3; // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∫–∏–∫–∞

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const STATE_BUILD = "Build";
const STATE_VOTE = "Vote";
const STATE_END = "End";

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentState = STATE_BUILD;
let votes = {};          // –ì–æ–ª–æ—Å–∞ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ { [RoomId]: count }
let kikVotes = {};       // –ì–æ–ª–æ—Å–∞ –∑–∞ –∫–∏–∫ { [RoomId]: Set(voterRoomIds) }
let votedPlayers = new Set();
let scores = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
export function init() {
    Properties.GetContext().GameModeName.Value = "–ë–∏—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π";
    Damage.GetContext().DamageOut.Value = false;
    Spawns.GetContext().RespawnTime.Value = 0;

    const team = Teams.Add("Builders", "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏", new Color(0.5, 0.5, 0.5, 0));
    team.Spawns.SpawnPointsGroups.Add(1);

    LeaderBoard.PlayerLeaderBoardValues = [
        { Value: "Scores", DisplayName: "–û—á–∫–∏", ShortDisplayName: "üèÜ" },
        { Value: "Votes", DisplayName: "–ì–æ–ª–æ—Å–∞", ShortDisplayName: "üëç" },
        { Value: "KikVotes", DisplayName: "–ö–∏–∫-–≥–æ–ª–æ—Å–∞", ShortDisplayName: "‚ö†Ô∏è" }
    ];

    Chat.OnMessage.Add(onChatMessage);
    new Timer(BUILD_TIME, startVoting).Start();
    updateGameState(STATE_BUILD);
}

function updateGameState(state) {
    currentState = state;
    Ui.GetContext().Hint.Value = getStateHint(state);
    Build.GetContext().BlocksSet.Value = (state === STATE_BUILD) ? BuildBlocksSet.AllClear : BuildBlocksSet.None;
}

function getStateHint(state) {
    switch (state) {
        case STATE_BUILD:
            return `–°—Ç—Ä–æ–π—Ç–µ! –û—Å—Ç–∞–ª–æ—Å—å ${BUILD_TIME} —Å–µ–∫.\n–ö–∏–∫: /Kik [RoomId] (–Ω—É–∂–Ω–æ ${KIK_THRESHOLD} –≥–æ–ª–æ—Å–∞)`;
        case STATE_VOTE:
            return `–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É: /Vote [RoomId]\n–û—Å—Ç–∞–ª–æ—Å—å ${VOTE_TIME} —Å–µ–∫.`;
        default:
            return "";
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞
function onChatMessage(e) {
    const player = Players.GetByRoomId(e.Sender);
    const text = e.Text.trim();

    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∏–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–π —Ñ–∞–∑–µ)
    if (text.startsWith("/Kik ")) {
        handleKikVote(player, text);
        return;
    }

    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É (—Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ VOTE)
    if (currentState === STATE_VOTE && text.startsWith("/Vote ")) {
        handleBuildVote(player, text);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ –∑–∞ –∫–∏–∫
function handleKikVote(voter, command) {
    const targetRoomId = parseInt(command.split(" ")[1]);

    if (isNaN(targetRoomId)) {
        voter.Message("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ RoomId (–Ω–∞–ø—Ä–∏–º–µ—Ä, /Kik 2)");
        return;
    }

    const target = Players.GetByRoomId(targetRoomId);
    if (!target) {
        voter.Message("–ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º RoomId –Ω–µ—Ç!");
        return;
    }

    if (voter.IdInRoom === targetRoomId) {
        voter.Message("–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è!");
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Set –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –∏–≥—Ä–æ–∫–∞
    if (!kikVotes[targetRoomId]) {
        kikVotes[targetRoomId] = new Set();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
    kikVotes[targetRoomId].add(voter.IdInRoom);
    const votesCount = kikVotes[targetRoomId].size;

    voter.Message(`–í–∞—à –≥–æ–ª–æ—Å –ø—Ä–æ—Ç–∏–≤ ${targetRoomId} —É—á—Ç–µ–Ω (${votesCount}/${KIK_THRESHOLD})`);
    target.Message(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${voter.IdInRoom} –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ –≤–∞—à –∫–∏–∫! (${votesCount}/${KIK_THRESHOLD})`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏–∫
    if (votesCount >= KIK_THRESHOLD) {
        target.Spawns.Despawn();
        target.Message("–í–∞—Å –∏—Å–∫–ª—é—á–∏–ª–∏ –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é!");
        Players.All.forEach(p => p.Message(`–ò–≥—Ä–æ–∫ ${targetRoomId} –∏—Å–∫–ª—é—á–µ–Ω!`));
        delete kikVotes[targetRoomId];
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É (–ø—Ä–µ–∂–Ω–∏–π handleBuildVote)
function handleBuildVote(voter, command) {
    if (votedPlayers.has(voter.IdInRoom)) {
        voter.Message("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!");
        return;
    }

    const targetRoomId = parseInt(command.split(" ")[1]);
    if (!Players.GetByRoomId(targetRoomId)) {
        voter.Message("–ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º RoomId –Ω–µ—Ç!");
        return;
    }

    votes[targetRoomId] = (votes[targetRoomId] || 0) + 1;
    votedPlayers.add(voter.IdInRoom);
    voter.Message(`–í–∞—à –≥–æ–ª–æ—Å –∑–∞ –∏–≥—Ä–æ–∫–∞ ${targetRoomId} —É—á—Ç–µ–Ω!`);
}

// –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
function startVoting() {
    updateGameState(STATE_VOTE);
    votes = {};
    votedPlayers.clear();
    new Timer(VOTE_TIME, endVoting).Start();
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
function endVoting() {
    updateGameState(STATE_END);

    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    for (const [roomId, count] of Object.entries(votes)) {
        const player = Players.GetByRoomId(parseInt(roomId));
        if (player) {
            player.Properties.Scores.Value += count * VOTE_REWARD;
            player.Properties.Votes.Value = count;
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const winnerRoomId = Object.keys(votes).reduce((a, b) => votes[a] > votes[b] ? a : b, null);
    if (winnerRoomId) {
        const winner = Players.GetByRoomId(parseInt(winnerRoomId));
        const msg = `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ò–≥—Ä–æ–∫ ${winnerRoomId} (${votes[winnerRoomId]} –≥–æ–ª–æ—Å–æ–≤)!`;
        Players.All.forEach(p => p.Message(msg));
    }

    new Timer(10, resetGame).Start();
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    Build.GetContext().ClearAll();
    Players.All.forEach(p => {
        p.Properties.Votes.Value = 0;
        p.Properties.KikVotes.Value = 0;
        p.Spawns.Spawn(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    });
    kikVotes = {};
    new Timer(BUILD_TIME, startVoting).Start();
    updateGameState(STATE_BUILD);
}
